[
    {
        "id": "4e2be51fc3ef07e2",
        "type": "tab",
        "label": "Energy Control (batteries only)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f6c856d741587a09",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "DIY Curtailment",
        "func": "if (msg.fit < 0) {\n    // node.warn(\"Negative FIT so not exporting - \" + msg.fit + \"c FIT\");\n    msg.decision = \"Curtailing exports (-ve FIT)\";\n    msg.decisions.push(msg.decision)\n    msg.curtailment_percentage = 100;\n    flow.set(\"curtailment\", 100);\n    return [msg, null]\n}\nelse {\n    // node.warn(\"Exporting ok - \" + msg.fit +\"c FIT\");\n    msg.decision = \"OK to export (+ve FIT)\";\n    msg.decisions.push(msg.decision)\n    msg.curtailment_percentage = 0;\n    flow.set(\"curtailment\", 0);\n    return [null, msg]\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 140,
        "wires": [
            [
                "1cd20dc7b8cf32a0"
            ],
            [
                "abd7cc884ffce0eb"
            ]
        ]
    },
    {
        "id": "29c2cf3831870e44",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Limit Export to 100W",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_export_power_limit"
        ],
        "data": "{\"value\":100}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1480,
        "y": 100,
        "wires": [
            [
                "dd1270ae8cca7d1e"
            ]
        ]
    },
    {
        "id": "402ca9596fb7ef84",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Unlimited Export (5kW)",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_export_power_limit"
        ],
        "data": "{ \"value\": 5000 }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1490,
        "y": 180,
        "wires": [
            [
                "dd1270ae8cca7d1e"
            ]
        ]
    },
    {
        "id": "1cd20dc7b8cf32a0",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Enable Power Limit Mode",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_export_power_limit_mode"
        ],
        "data": "{ \"option\": \"Enabled\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1230,
        "y": 100,
        "wires": [
            [
                "29c2cf3831870e44"
            ]
        ]
    },
    {
        "id": "abd7cc884ffce0eb",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Enable Power Limit Mode",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_export_power_limit_mode"
        ],
        "data": "{ \"option\": \"Enabled\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1230,
        "y": 180,
        "wires": [
            [
                "402ca9596fb7ef84"
            ]
        ]
    },
    {
        "id": "42f548c6f2d55798",
        "type": "catch",
        "z": "4e2be51fc3ef07e2",
        "name": "CatchAll",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 60,
        "wires": [
            [
                "f4b8172695e10b28"
            ]
        ]
    },
    {
        "id": "f4b8172695e10b28",
        "type": "debug",
        "z": "4e2be51fc3ef07e2",
        "name": "Flow Errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 60,
        "wires": []
    },
    {
        "id": "48ed1da256bce90c",
        "type": "debug",
        "z": "4e2be51fc3ef07e2",
        "name": "Debug Curtailment",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 140,
        "wires": []
    },
    {
        "id": "f9be3ceee741feaa",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "EMS Forced Mode",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_ems_mode"
        ],
        "data": "{ \"option\": \"Forced mode\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1470,
        "y": 460,
        "wires": [
            [
                "3c50659689d69b98"
            ]
        ]
    },
    {
        "id": "3c50659689d69b98",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Forced charge",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_battery_forced_charge_discharge_cmd"
        ],
        "data": "{ \"option\": \"Forced charge\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1760,
        "y": 460,
        "wires": [
            [
                "3bf2f9245bdfd7c1"
            ]
        ]
    },
    {
        "id": "211f8e6161b1576e",
        "type": "api-current-state",
        "z": "4e2be51fc3ef07e2",
        "name": "Get Battery Level",
        "server": "5165f8c6.cc4798",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.battery_level",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "battery",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 630,
        "y": 520,
        "wires": [
            [
                "8bbb6f01c8f90c09"
            ]
        ]
    },
    {
        "id": "1cb6a7595b622ca5",
        "type": "api-current-state",
        "z": "4e2be51fc3ef07e2",
        "name": "Get Forecast",
        "server": "5165f8c6.cc4798",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.forecast",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "forecast",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "forecast_obj",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 370,
        "y": 520,
        "wires": [
            [
                "f44f4af69d237a79"
            ]
        ]
    },
    {
        "id": "cbc2b3ce60602a33",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "EMS Self Consumption Mode",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_ems_mode"
        ],
        "data": "{ \"option\": \"Self-consumption mode (default)\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1510,
        "y": 520,
        "wires": [
            [
                "6cd3f7bd8a91b3cf"
            ]
        ]
    },
    {
        "id": "6cd3f7bd8a91b3cf",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Stop forced charge/discharge",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_battery_forced_charge_discharge_cmd"
        ],
        "data": "{ \"option\": \"Stop (default)\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1800,
        "y": 520,
        "wires": [
            [
                "42f9b51f5a9b4664"
            ]
        ]
    },
    {
        "id": "e659ba4532f5fbd4",
        "type": "api-current-state",
        "z": "4e2be51fc3ef07e2",
        "name": "Get Import Price",
        "server": "5165f8c6.cc4798",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.costs_flex_up",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "current",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 180,
        "y": 520,
        "wires": [
            [
                "1cb6a7595b622ca5"
            ]
        ]
    },
    {
        "id": "d99f7dad230f7c35",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "EMS Forced Mode",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_ems_mode"
        ],
        "data": "{ \"option\": \"Forced mode\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1210,
        "y": 300,
        "wires": [
            [
                "4962409e769dc929"
            ]
        ]
    },
    {
        "id": "4962409e769dc929",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Force discharge",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_battery_forced_charge_discharge_cmd"
        ],
        "data": "{ \"option\": \"Forced discharge\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1460,
        "y": 300,
        "wires": [
            [
                "b2ddf539b71eafcf"
            ]
        ]
    },
    {
        "id": "362fa25312f78cbc",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Export from Battery?",
        "func": "let today = new Date();\n// node.warn(\"hour now is \" + today.getHours());\n\nmsg.baseline_consumption = flow.get(\"baseline_consumption\");\n// node.warn(\"baseline consumption=\" + msg.baseline_consumption)\n\nif (msg.fit >= .3 && msg.battery > 8 && today.getHours() >= 6 && today.getHours() < 8) {\n    // node.warn(\"Morning peak occurring, battery at \" + msg.battery + \"%, between 6-8am, FIT \" + msg.fit);\n    msg.decision = \"Morning peak occurring (>=30c,>8%), battery at \" + msg.battery + \"%, between 6-8am, FIT \" + msg.fit;\n    msg.decisions.push(msg.decision)\n    return [msg, null]\n}\nelse if (msg.fit > 1 && msg.battery > 40) {\n    // node.warn(\"Extremely high FIT and limited capacity: \" + msg.fit);\n    msg.decision = \"Extremely high FIT (>=$1,>40%), so forcing discharge\";\n    msg.decisions.push(msg.decision)\n    return [msg, null]\n}\nelse if (msg.fit >= .6 && msg.battery > 50) {\n    // node.warn(\"Very high FIT and some capacity: \" + msg.fit);\n    msg.decision = \"Very high FIT (>=65c,>50%), so forcing discharge\";\n    msg.decisions.push(msg.decision)\n    return [msg, null]\n}\nelse if (msg.fit >= .5 && msg.battery > 60) {\n    // node.warn(\"Great FIT and available capacity: \" + msg.fit);\n    msg.decision = \"High FIT (>=50c,>60%), so forcing discharge\";\n    msg.decisions.push(msg.decision)\n    return [msg, null]\n}\nelse if (msg.fit >= .4 && msg.battery > 70) {\n    // node.warn(\"Reasonable FIT and available capacity: \"+msg.fit);\n    msg.decision = \"Moderate FIT (>=40c,>70%), so forcing discharge\";\n    msg.decisions.push(msg.decision)\n    return [msg, null]\n}\nelse if (msg.fit >= .3 && msg.battery > 80) {\n    // node.warn(\"Tolerable FIT and available capacity: \" + msg.fit);\n    msg.decision = \"Acceptable FIT (>=32c,>80%), so forcing discharge\";\n    msg.decisions.push(msg.decision)\n    return [msg, null]\n}\nelse {\n    // node.warn(\"Not worth exporting from battery: \" + msg.fit);\n    msg.decision = \"Not worth exporting from battery.\";\n    msg.decisions.push(msg.decision)\n    return [null,msg]\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 340,
        "wires": [
            [
                "d99f7dad230f7c35"
            ],
            [
                "2760640dda18d016"
            ]
        ]
    },
    {
        "id": "e176b5b312f0d4d3",
        "type": "api-current-state",
        "z": "4e2be51fc3ef07e2",
        "name": "Get Feed-in Price",
        "server": "5165f8c6.cc4798",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.earnings_flex_up",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "fit",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 190,
        "y": 240,
        "wires": [
            [
                "9d31ce4bf37c7de6"
            ]
        ]
    },
    {
        "id": "237ce8db3c57c351",
        "type": "inject",
        "z": "4e2be51fc3ef07e2",
        "d": true,
        "name": "Run Every 15s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 180,
        "wires": [
            [
                "12ccb7522c6380bf"
            ]
        ]
    },
    {
        "id": "f06e4f22cd81432b",
        "type": "debug",
        "z": "4e2be51fc3ef07e2",
        "name": "Debug Forced Discharge",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 300,
        "wires": []
    },
    {
        "id": "9d31ce4bf37c7de6",
        "type": "api-current-state",
        "z": "4e2be51fc3ef07e2",
        "name": "Get Battery Level",
        "server": "5165f8c6.cc4798",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.battery_level",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "battery",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 270,
        "y": 300,
        "wires": [
            [
                "ab64c3f5bf4badb8"
            ]
        ]
    },
    {
        "id": "1c037ec1768ec0bc",
        "type": "debug",
        "z": "4e2be51fc3ef07e2",
        "name": "Debug Force Charge",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2400,
        "y": 460,
        "wires": []
    },
    {
        "id": "b2ddf539b71eafcf",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "5kW Discharge",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_forced_charge_discharge_power"
        ],
        "data": "{ \"value\": 5000 }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1780,
        "y": 300,
        "wires": [
            [
                "f06e4f22cd81432b",
                "8f826e1424c5bfd4"
            ]
        ]
    },
    {
        "id": "3bf2f9245bdfd7c1",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "10kW charge",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_forced_charge_discharge_power"
        ],
        "data": "{ \"value\": 10000 }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2050,
        "y": 460,
        "wires": [
            [
                "1c037ec1768ec0bc",
                "dfde72a8e4f9222d"
            ]
        ]
    },
    {
        "id": "42f9b51f5a9b4664",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "100W charge/discharge",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_forced_charge_discharge_power"
        ],
        "data": "{ \"value\": 100 }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2090,
        "y": 520,
        "wires": [
            [
                "724ef1e48049f57a"
            ]
        ]
    },
    {
        "id": "8bbb6f01c8f90c09",
        "type": "rbe",
        "z": "4e2be51fc3ef07e2",
        "name": "RBE",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "current",
        "topi": "battery",
        "x": 790,
        "y": 520,
        "wires": [
            [
                "48e5b438de6c5060"
            ]
        ]
    },
    {
        "id": "dd1270ae8cca7d1e",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Slow battery charge?",
        "func": "let today = new Date()\n\n// if FIT 0 or less, allow the battery to be charged at full speed\nif (msg.fit <= 0 ) {   \n    // node.warn(\"No FIT benefit - \" + msg.fit + \"c - so charging at full speed\");\n    msg.decision = \"No feed-in benefit so not limiting charge rate\";\n    msg.decisions.push(msg.decision)\n    msg.battery_w = 10000;\n    return msg\n}\nelse if (msg.battery >= 30 && today.getHours() > 12 && today.getHours() < 17) {\n    // node.warn(\"FIT benefit - \" + msg.fit + \"c - so slow charging\");\n    msg.decision = \"Getting late in the day, FIT is probably going to be higher later so not limiting charge rate now\";\n    msg.decisions.push(msg.decision)\n    msg.battery_w = 10000;\n    return msg\n}\n//there is some feed-in benefit but we are favouring battery charging\nelse {\n    // node.warn(\"Else - \" + msg.fit + \"c - so fast charging\");\n    msg.decision = \"Feed-in benefit but not limiting charge rate\";\n    msg.decisions.push(msg.decision)\n    msg.battery_w = 5000;\n    return msg\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 140,
        "wires": [
            [
                "be9ea91f5dce79b8"
            ]
        ]
    },
    {
        "id": "be9ea91f5dce79b8",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Slow or max charge rate",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_battery_max_charge_power"
        ],
        "data": "{\"value\": {{battery_w}} }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2130,
        "y": 140,
        "wires": [
            [
                "48ed1da256bce90c",
                "0226c50be755c603"
            ]
        ]
    },
    {
        "id": "fe6a46bdd00d4ae5",
        "type": "http request",
        "z": "4e2be51fc3ef07e2",
        "name": "PV Forecast East",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.solcast.com.au/rooftop_sites/{site}/forecasts?format=json&api_key={key}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 960,
        "wires": [
            [
                "6f61a1477beb24d8"
            ]
        ]
    },
    {
        "id": "b27aec154108a2c8",
        "type": "inject",
        "z": "4e2be51fc3ef07e2",
        "d": true,
        "name": "6am",
        "props": [
            {
                "p": "hour",
                "v": "6",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "00 06 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 960,
        "wires": [
            [
                "fe6a46bdd00d4ae5",
                "109d0011bac0cbad"
            ]
        ]
    },
    {
        "id": "78aaf29915a5d662",
        "type": "file",
        "z": "4e2be51fc3ef07e2",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 740,
        "y": 960,
        "wires": [
            [
                "5e0f1bd46f2db7c8"
            ]
        ]
    },
    {
        "id": "32bf154f6f36c8d1",
        "type": "file",
        "z": "4e2be51fc3ef07e2",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 740,
        "y": 1040,
        "wires": [
            [
                "1009c7321ea1e513"
            ]
        ]
    },
    {
        "id": "109d0011bac0cbad",
        "type": "http request",
        "z": "4e2be51fc3ef07e2",
        "name": "PV Forecast West",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.solcast.com.au/rooftop_sites/{site}/forecasts?format=json&api_key={key}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 1040,
        "wires": [
            [
                "696b80f74708815a"
            ]
        ]
    },
    {
        "id": "5e0f1bd46f2db7c8",
        "type": "debug",
        "z": "4e2be51fc3ef07e2",
        "name": "Debug East Forecast",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 960,
        "wires": []
    },
    {
        "id": "1009c7321ea1e513",
        "type": "debug",
        "z": "4e2be51fc3ef07e2",
        "name": "Debug West Forecast",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1040,
        "wires": []
    },
    {
        "id": "d9bee7fdb3a26a27",
        "type": "link in",
        "z": "4e2be51fc3ef07e2",
        "name": "Import Decider",
        "links": [
            "2760640dda18d016"
        ],
        "x": 45,
        "y": 520,
        "wires": [
            [
                "e659ba4532f5fbd4"
            ]
        ]
    },
    {
        "id": "2760640dda18d016",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "decide on import",
        "mode": "link",
        "links": [
            "d9bee7fdb3a26a27"
        ],
        "x": 1135,
        "y": 380,
        "wires": []
    },
    {
        "id": "e467a37b5f2ad77c",
        "type": "http request",
        "z": "4e2be51fc3ef07e2",
        "name": "PV Actuals East",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.solcast.com.au/rooftop_sites/{site}/estimated_actuals?format=json&api_key={key}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 360,
        "y": 1300,
        "wires": [
            [
                "859dfbd61648cfb4"
            ]
        ]
    },
    {
        "id": "0f03c737ea8982be",
        "type": "file",
        "z": "4e2be51fc3ef07e2",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 740,
        "y": 1300,
        "wires": [
            [
                "afc1cb0afdf1800d"
            ]
        ]
    },
    {
        "id": "22728e43ae2ac91c",
        "type": "file in",
        "z": "4e2be51fc3ef07e2",
        "name": "Read East",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 490,
        "y": 1400,
        "wires": [
            [
                "9ab41b4baeefd368"
            ]
        ]
    },
    {
        "id": "9ab41b4baeefd368",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Parse East",
        "func": "msg.east = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1400,
        "wires": [
            [
                "551ad4065239fa37"
            ]
        ]
    },
    {
        "id": "2c79495ac7be1cfa",
        "type": "file",
        "z": "4e2be51fc3ef07e2",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 740,
        "y": 1340,
        "wires": [
            [
                "59f9e4fe3b43c3aa"
            ]
        ]
    },
    {
        "id": "7d268dec94ff4df1",
        "type": "http request",
        "z": "4e2be51fc3ef07e2",
        "name": "PV Actuals West",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.solcast.com.au/rooftop_sites/{site}/estimated_actuals?format=json&api_key={key}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 360,
        "y": 1340,
        "wires": [
            [
                "3ffd5725a2dc9d05"
            ]
        ]
    },
    {
        "id": "4f154c2a96f14de1",
        "type": "file in",
        "z": "4e2be51fc3ef07e2",
        "name": "Read West",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1050,
        "y": 1400,
        "wires": [
            [
                "55c11e4e45abaf01"
            ]
        ]
    },
    {
        "id": "55c11e4e45abaf01",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Parse and Add",
        "func": "msg.west = JSON.parse(msg.payload);\nmsg.totals = {}\nmsg.actual_today = 0;\nmsg.actual_by_hour = [];\nmsg.actual_yesterday = 0;\nmsg.actual_yesterday_by_hour = [];\nmsg.total_parts = [];\nmsg.forecast_periods = [];\n\nlet today = new Date();\nlet yesterday = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 1);\nnode.warn(today);\nnode.warn(yesterday);\nlet max_items = Math.min(msg.west.estimated_actuals.length, msg.east.estimated_actuals.length);\nif (msg.west.estimated_actuals[0].period_end === msg.east.estimated_actuals[0].period_end) {\n    for (let i = 0; i < max_items; i++) {\n        let dp = msg.west.estimated_actuals[i].period_end.split(/\\D/);\n        let dateObj = new Date(Date.UTC(dp[0], dp[1]-1, dp[2], dp[3], dp[4], dp[5]));\n        let total = (msg.west.estimated_actuals[i].pv_estimate + msg.east.estimated_actuals[i].pv_estimate)/2;\n        if (today.getDate() === dateObj.getDate()) {\n            msg.actual_today += total;\n            if (msg.actual_by_hour[dateObj.getHours()]) {\n                msg.actual_by_hour[dateObj.getHours()] += total;\n            }\n            else {\n                msg.actual_by_hour[dateObj.getHours()] = total;\n            }\n            msg.total_parts.push(total);\n        }\n        if (yesterday.getDate() === dateObj.getDate()) {\n            msg.actual_yesterday += total;\n            if (msg.actual_yesterday_by_hour[dateObj.getHours()]) {\n                msg.actual_yesterday_by_hour[dateObj.getHours()] += total;\n            }\n            else {\n                msg.actual_yesterday_by_hour[dateObj.getHours()] = total;\n            }\n            msg.forecast_periods.push(total);\n        }\n        msg.totals[msg.west.estimated_actuals[i].period_end] = { total: total, date: dateObj };\n    }\n}\nelse {\n    node.error(\"files have different start times\", msg);\n}\nmsg.actual_yesterday = msg.actual_yesterday.toPrecision(3)\nmsg.actual_today = msg.actual_today.toPrecision(3)\nfor (let i = 0; i < msg.actual_yesterday_by_hour.length; i++) {\n    if (msg.actual_yesterday_by_hour[i] !== undefined) {\n        msg.actual_yesterday_by_hour[i] = msg.actual_yesterday_by_hour[i].toPrecision(2)\n    }\n}\nfor (let i = 0; i < msg.actual_by_hour.length; i++) {\n    if (msg.actual_by_hour[i] !== undefined) {\n        msg.actual_by_hour[i] = msg.actual_by_hour[i].toPrecision(2)\n    }\n}\nmsg.payload = {\n    \"actual_yesterday\": msg.actual_yesterday,\n    \"actual_yesterday_by_hour\": msg.actual_yesterday_by_hour,\n    \"actual_today\": msg.actual_today,\n    \"actual_by_hour\": msg.actual_by_hour,\n};\nmsg.filename = \"/config/node-red/solcast/actuals-\" + msg.hour + \"-\" + today.getDate() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getFullYear() + \".json\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1400,
        "wires": [
            [
                "c268bef77aa54960"
            ]
        ]
    },
    {
        "id": "61bdfc307ad2bee8",
        "type": "debug",
        "z": "4e2be51fc3ef07e2",
        "name": "Debug Writing Actuals",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 1400,
        "wires": []
    },
    {
        "id": "859dfbd61648cfb4",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Filename",
        "func": "let today = new Date();\nlet datestamp = today.getDate() + \"-\" + (today.getMonth()+1) + \"-\" + today.getFullYear();\nmsg.filename = \"/config/node-red/solcast/actuals/\"+datestamp+\"/east.json\"\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1300,
        "wires": [
            [
                "0f03c737ea8982be"
            ]
        ]
    },
    {
        "id": "afc1cb0afdf1800d",
        "type": "debug",
        "z": "4e2be51fc3ef07e2",
        "name": "Debug East Actuals",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1300,
        "wires": []
    },
    {
        "id": "3ffd5725a2dc9d05",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Filename",
        "func": "let today = new Date();\nlet datestamp = today.getDate() + \"-\" + (today.getMonth()+1) + \"-\" + today.getFullYear();\nmsg.filename = \"/config/node-red/solcast/actuals/\"+datestamp+\"/west.json\"\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1340,
        "wires": [
            [
                "2c79495ac7be1cfa"
            ]
        ]
    },
    {
        "id": "59f9e4fe3b43c3aa",
        "type": "debug",
        "z": "4e2be51fc3ef07e2",
        "name": "Debug West Actuals",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1340,
        "wires": []
    },
    {
        "id": "d77e891c208275b7",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "East Filename",
        "func": "let today = new Date();\nlet datestamp = today.getDate() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getFullYear();\nmsg.filename = \"/config/node-red/solcast/actuals/\" + datestamp + \"/east.json\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1400,
        "wires": [
            [
                "22728e43ae2ac91c"
            ]
        ]
    },
    {
        "id": "551ad4065239fa37",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "West Filename",
        "func": "let today = new Date();\nlet datestamp = today.getDate() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getFullYear();\nmsg.filename = \"/config/node-red/solcast/actuals/\" + datestamp + \"/west.json\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1400,
        "wires": [
            [
                "4f154c2a96f14de1"
            ]
        ]
    },
    {
        "id": "724ef1e48049f57a",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Preserve Battery?",
        "func": "let today = new Date();\n// node.warn(\"hour now is \" + today.getHours());\n// node.warn(msg.current + \" and battery \" + msg.battery);\nif (today.getHours() >= 13) {\n    if (msg.current <= .05) {\n        // node.warn(\"After 2pm - preserving battery - grid cheaper than battery cycles\");\n        msg.decision = \"After 1pm, preserving battery - grid cheaper than battery cycles\";\n        msg.decisions.push(msg.decision)\n        return [null, msg]\n    }\n    else {\n        msg.decision = \"After 1pm - but not worth preserving battery at current price, use battery\";\n        msg.decisions.push(msg.decision)\n        // node.warn(\"Not worth preserving battery\");\n        return [msg, null]\n    }\n}\nelse {\n    msg.decision = \"Before 1pm, not worth preserving battery, use battery as required\";\n    msg.decisions.push(msg.decision)\n    // node.warn(\"Not worth preserving battery\");\n    return [msg, null]\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 520,
        "wires": [
            [
                "ade9207a5218c7b6"
            ],
            [
                "af9e6fd213f97af3"
            ]
        ]
    },
    {
        "id": "af9e6fd213f97af3",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Limit battery discharge (100W)",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_battery_max_discharge_power"
        ],
        "data": "{ \"value\": 100 }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2710,
        "y": 560,
        "wires": [
            [
                "2f4d428b304ff458",
                "10afdbc80e16938a"
            ]
        ]
    },
    {
        "id": "ade9207a5218c7b6",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "No Limit on battery discharge (5kW)",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_battery_max_discharge_power"
        ],
        "data": "{ \"value\": 5000 }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2730,
        "y": 480,
        "wires": [
            [
                "2f4d428b304ff458",
                "10afdbc80e16938a"
            ]
        ]
    },
    {
        "id": "2f4d428b304ff458",
        "type": "debug",
        "z": "4e2be51fc3ef07e2",
        "name": "Debug Self-Consume",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3060,
        "y": 560,
        "wires": []
    },
    {
        "id": "c268bef77aa54960",
        "type": "file",
        "z": "4e2be51fc3ef07e2",
        "name": "Write actuals",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1430,
        "y": 1400,
        "wires": [
            [
                "61bdfc307ad2bee8"
            ]
        ]
    },
    {
        "id": "f424570a4c5aebe6",
        "type": "mqtt in",
        "z": "4e2be51fc3ef07e2",
        "name": "Get remaining kW",
        "topic": "remaining_kw",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "814a6af6675ecbdc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1550,
        "y": 1260,
        "wires": [
            [
                "220fd5b6ef425554"
            ]
        ]
    },
    {
        "id": "220fd5b6ef425554",
        "type": "debug",
        "z": "4e2be51fc3ef07e2",
        "name": "Debug Forecast MQTT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 1260,
        "wires": []
    },
    {
        "id": "ab64c3f5bf4badb8",
        "type": "api-current-state",
        "z": "4e2be51fc3ef07e2",
        "name": "Get Current Load",
        "server": "5165f8c6.cc4798",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.load_power",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "load_now",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 350,
        "y": 360,
        "wires": [
            [
                "c0450790b9cec180"
            ]
        ]
    },
    {
        "id": "d171e2253cb2d2cc",
        "type": "inject",
        "z": "4e2be51fc3ef07e2",
        "d": true,
        "name": "9pm",
        "props": [
            {
                "p": "hour",
                "v": "21",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "00 21 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 1320,
        "wires": [
            [
                "e467a37b5f2ad77c",
                "7d268dec94ff4df1"
            ]
        ]
    },
    {
        "id": "0b7c7d00a5782653",
        "type": "inject",
        "z": "4e2be51fc3ef07e2",
        "d": true,
        "name": "9pm",
        "props": [
            {
                "p": "hour",
                "v": "21",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "02 21 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 1400,
        "wires": [
            [
                "d77e891c208275b7"
            ]
        ]
    },
    {
        "id": "8e360d08372d718b",
        "type": "inject",
        "z": "4e2be51fc3ef07e2",
        "d": true,
        "name": "6am",
        "props": [
            {
                "p": "hour",
                "v": "6",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "05 06 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 1100,
        "wires": [
            [
                "620bfc4a63af23fb"
            ]
        ]
    },
    {
        "id": "edcb827ef138a08c",
        "type": "file in",
        "z": "4e2be51fc3ef07e2",
        "name": "Get baseline consumption",
        "filename": "/config/node-red/reference/baseline-consumption.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 840,
        "wires": [
            [
                "b4600b5d7f52f6c3"
            ]
        ]
    },
    {
        "id": "b4600b5d7f52f6c3",
        "type": "csv",
        "z": "4e2be51fc3ef07e2",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "mult",
        "ret": "\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 650,
        "y": 840,
        "wires": [
            [
                "4e02a52316e26516"
            ]
        ]
    },
    {
        "id": "d471b96b6155ee57",
        "type": "debug",
        "z": "4e2be51fc3ef07e2",
        "name": "Debug Load Consumption",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 840,
        "wires": []
    },
    {
        "id": "e28a1b83b9277925",
        "type": "inject",
        "z": "4e2be51fc3ef07e2",
        "d": true,
        "name": "Get Baseline Consumption",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 840,
        "wires": [
            [
                "edcb827ef138a08c"
            ]
        ]
    },
    {
        "id": "4e02a52316e26516",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Convert to Obj",
        "func": "let obj = {};\nfor (let i=0; i<msg.payload.length; i++) {\n    obj[\"\"+msg.payload[i].col1] = msg.payload[i].col2;\n}\nmsg.payload = obj;\nflow.set(\"baseline_consumption\", obj);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 840,
        "wires": [
            [
                "d471b96b6155ee57"
            ]
        ]
    },
    {
        "id": "6dade8f1682615f2",
        "type": "inject",
        "z": "4e2be51fc3ef07e2",
        "d": true,
        "name": "10am",
        "props": [
            {
                "p": "hour",
                "v": "10",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "00 10 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 1000,
        "wires": [
            [
                "fe6a46bdd00d4ae5",
                "109d0011bac0cbad"
            ]
        ]
    },
    {
        "id": "a9fc6afd1a8a8456",
        "type": "inject",
        "z": "4e2be51fc3ef07e2",
        "d": true,
        "name": "2pm",
        "props": [
            {
                "p": "hour",
                "v": "14",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "00 14 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 1040,
        "wires": [
            [
                "fe6a46bdd00d4ae5",
                "109d0011bac0cbad"
            ]
        ]
    },
    {
        "id": "ce50293456fbccd3",
        "type": "inject",
        "z": "4e2be51fc3ef07e2",
        "d": true,
        "name": "10am",
        "props": [
            {
                "p": "hour",
                "v": "10",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "05 10 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 1140,
        "wires": [
            [
                "620bfc4a63af23fb"
            ]
        ]
    },
    {
        "id": "5d81910d939ef4b0",
        "type": "inject",
        "z": "4e2be51fc3ef07e2",
        "d": true,
        "name": "2pm",
        "props": [
            {
                "p": "hour",
                "v": "14",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "05 14 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 1180,
        "wires": [
            [
                "620bfc4a63af23fb"
            ]
        ]
    },
    {
        "id": "6f61a1477beb24d8",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Filename",
        "func": "let today = new Date();\nlet datestamp = today.getDate() + \"-\" + (today.getMonth()+1) + \"-\" + today.getFullYear();\nmsg.filename = \"/config/node-red/solcast/data/\"+datestamp+\"/\" + msg.hour + \"-east.json\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 960,
        "wires": [
            [
                "78aaf29915a5d662"
            ]
        ]
    },
    {
        "id": "696b80f74708815a",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Filename",
        "func": "let today = new Date();\nlet datestamp = today.getDate() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getFullYear();\nmsg.filename = \"/config/node-red/solcast/data/\"+datestamp+\"/\" + msg.hour + \"-west.json\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1040,
        "wires": [
            [
                "32bf154f6f36c8d1"
            ]
        ]
    },
    {
        "id": "620bfc4a63af23fb",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "East Filename",
        "func": "let today = new Date();\nmsg.datestamp = today.getDate() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getFullYear();\n//regenerate all files for today\nlet hours = [6,10,14];\nfor (let i=0; i<hours.length; i++) {\n    if (hours[i] <= today.getHours()) { //file should exist\n        msg.hour = hours[i];\n        msg.filename = \"/config/node-red/solcast/data/\"+msg.datestamp+\"/\" + msg.hour + \"-east.json\";\n        node.send(msg); \n    }\n    else {\n        // node.warn(\"skipping hour as not there yet: \"+hours[i])\n        // node.send([null,msg])\n    }\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1140,
        "wires": [
            [
                "b4c7d00daf2cb02d"
            ]
        ]
    },
    {
        "id": "b4c7d00daf2cb02d",
        "type": "file in",
        "z": "4e2be51fc3ef07e2",
        "name": "Read East",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 550,
        "y": 1140,
        "wires": [
            [
                "682bcbf537fc96fd"
            ]
        ]
    },
    {
        "id": "682bcbf537fc96fd",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Parse East",
        "func": "msg.east = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1140,
        "wires": [
            [
                "85f8dfe467da9439"
            ]
        ]
    },
    {
        "id": "85f8dfe467da9439",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "West Filename",
        "func": "msg.filename = \"/config/node-red/solcast/data/\"+msg.datestamp+\"/\" + msg.hour + \"-west.json\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1140,
        "wires": [
            [
                "b675e79a44f8132e"
            ]
        ]
    },
    {
        "id": "b675e79a44f8132e",
        "type": "file in",
        "z": "4e2be51fc3ef07e2",
        "name": "Read West",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1110,
        "y": 1140,
        "wires": [
            [
                "371662316d7a65e8"
            ]
        ]
    },
    {
        "id": "371662316d7a65e8",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Parse and Add",
        "func": "msg.west = JSON.parse(msg.payload);\nmsg.totals = {}\nmsg.remaining_today = 0;\nmsg.remaining_by_hour = [];\nmsg.forecast_tomorrow = 0;\nmsg.forecast_tomorrow_by_hour = [];\nmsg.total_parts = [];\nmsg.forecast_periods = [];\nlet today = new Date();\nlet datestamp = today.getDate() + \"-\" + (today.getMonth()+1) + \"-\" + today.getFullYear();\nlet tomorrow = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n//node.warn(today);\n//node.warn(tomorrow);\nlet max_items = Math.min(msg.west.forecasts.length, msg.east.forecasts.length);\nlet peak_gen_time = new Date();\nlet peak_gen_kwh = 0;\nif (msg.west.forecasts[0].period_end === msg.east.forecasts[0].period_end) {\n    for (let i = 0; i < max_items; i++) {\n        let dp = msg.west.forecasts[i].period_end.split(/\\D/);\n        let dateObj = new Date(Date.UTC(dp[0], dp[1]-1, dp[2], dp[3], dp[4], dp[5]));\n        //set time back half an hour so the time is period start not end\n        dateObj.setTime(dateObj.getTime()-(30*60*1000))\n        let pv_estimate_west = (msg.west.forecasts[i].pv_estimate10 + msg.west.forecasts[i].pv_estimate90) / 2;\n        let pv_estimate_east = (msg.east.forecasts[i].pv_estimate10 + msg.east.forecasts[i].pv_estimate90) / 2;\n        let total = (pv_estimate_west + pv_estimate_east)/2;\n        if (today.getDate() === dateObj.getDate()) {\n            //node.warn(\"In if statement\");\n            msg.remaining_today += total;\n            if (msg.remaining_by_hour[dateObj.getHours()]) {\n                msg.remaining_by_hour[dateObj.getHours()] += total;\n                if (peak_gen_kwh < msg.remaining_by_hour[dateObj.getHours()]) {\n                    peak_gen_kwh = msg.remaining_by_hour[dateObj.getHours()];\n                    peak_gen_time = dateObj;\n                }\n            }\n            else {\n                msg.remaining_by_hour[dateObj.getHours()] = total;\n            }\n            msg.total_parts.push(total);\n        }\n        if (tomorrow.getDate() === dateObj.getDate()) {\n            msg.forecast_tomorrow += total;\n            if (msg.forecast_tomorrow_by_hour[dateObj.getHours()]) {\n                msg.forecast_tomorrow_by_hour[dateObj.getHours()] += total;\n            }\n            else {\n                msg.forecast_tomorrow_by_hour[dateObj.getHours()] = total;\n            }\n            msg.forecast_periods.push(total);\n        }\n        msg.totals[msg.east.forecasts[i].period_end] = { total: total, date: dateObj };\n    }\n}\nelse {\n    node.error(\"files have different start times\", msg);\n}\nmsg.remaining_today = msg.remaining_today.toPrecision(3)\n//node.warn(msg.remaining_today);\nmsg.forecast_tomorrow = msg.forecast_tomorrow.toPrecision(3)\nfor (let i = 0; i < msg.remaining_by_hour.length; i++) {\n    if (msg.remaining_by_hour[i] !== undefined) {\n        msg.remaining_by_hour[i] = msg.remaining_by_hour[i].toPrecision(2)\n    }\n}\n\nfor (let i = 0; i < msg.forecast_tomorrow_by_hour.length; i++) {\n    if (msg.forecast_tomorrow_by_hour[i] !== undefined) {\n        msg.forecast_tomorrow_by_hour[i] = msg.forecast_tomorrow_by_hour[i].toPrecision(2)\n    }\n}\nlet peak_gen_hm = peak_gen_time.getHours().toString().padStart(2, '0') + \":\" + peak_gen_time.getMinutes().toString().padStart(2, '0');\n\nflow.set(\"peak_gen_kwh\", peak_gen_kwh.toPrecision(3));\nflow.set(\"peak_gen_time\", peak_gen_hm);\nflow.set(\"remaining_today\", msg.remaining_by_hour);\nflow.set(\"expected_tomorrow\", msg.forecast_tomorrow);\n//if (today.getHours() < 10) {\n    flow.set(\"forecast_pv_today\",msg.remaining_today)\n//}\n\n//node.warn(peak_gen_kwh);\n//node.warn(peak_gen_time);\n//node.warn(msg.remaining_today);\n//node.warn(msg.remaining_by_hour);\n//node.warn(msg.forecast_tomorrow);\n//node.warn(msg.forecast_tomorrow_by_hour);\n\nmsg.payload = {\n    \"peak_gen_kwh\": peak_gen_kwh,\n    \"peak_gen_time\": peak_gen_time,\n    \"forecast_today\": msg.remaining_today,\n    \"forecast_by_hour\": msg.remaining_by_hour,\n    \"forecast_tomorrow\": msg.forecast_tomorrow,\n    \"forecast_tomorrow_by_hour\": msg.forecast_tomorrow_by_hour\n};\nmsg.filename = \"/config/node-red/solcast/forecasts/\"+datestamp+\"/\" + msg.hour + \".json\"\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 1140,
        "wires": [
            [
                "a6b7eb3d711d70ba",
                "5ebec5bc5cb63d16"
            ]
        ]
    },
    {
        "id": "a6b7eb3d711d70ba",
        "type": "file",
        "z": "4e2be51fc3ef07e2",
        "name": "Write forecast",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1540,
        "y": 1140,
        "wires": [
            [
                "75cb1e1362400e85"
            ]
        ]
    },
    {
        "id": "5ebec5bc5cb63d16",
        "type": "mqtt out",
        "z": "4e2be51fc3ef07e2",
        "name": "Send Remaining kW",
        "topic": "remaining_kw",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "814a6af6675ecbdc",
        "x": 1560,
        "y": 1200,
        "wires": []
    },
    {
        "id": "75cb1e1362400e85",
        "type": "debug",
        "z": "4e2be51fc3ef07e2",
        "name": "Debug Writing Forecast",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 1140,
        "wires": []
    },
    {
        "id": "039ccf2e04eeb158",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Shutdown Inverter",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_inverter_run_mode"
        ],
        "data": "{ \"option\": \"Shutdown\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1250,
        "y": 580,
        "wires": [
            [
                "530655f1d2085e82"
            ]
        ]
    },
    {
        "id": "2811c8a2e5c7d605",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Enable Inverter",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_inverter_run_mode"
        ],
        "data": "{ \"option\": \"Enabled\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1240,
        "y": 460,
        "wires": [
            [
                "f9be3ceee741feaa"
            ]
        ]
    },
    {
        "id": "f14e76209d58a14c",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Enable Inverter",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_inverter_run_mode"
        ],
        "data": "{ \"option\": \"Enabled\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1240,
        "y": 520,
        "wires": [
            [
                "cbc2b3ce60602a33"
            ]
        ]
    },
    {
        "id": "b1f08fad0e8ea7ed",
        "type": "debug",
        "z": "4e2be51fc3ef07e2",
        "name": "Debug Shutdown",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2390,
        "y": 580,
        "wires": []
    },
    {
        "id": "530655f1d2085e82",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "EMS Self Consumption Mode",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_ems_mode"
        ],
        "data": "{ \"option\": \"Self-consumption mode (default)\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1510,
        "y": 580,
        "wires": [
            [
                "069438329a072b59"
            ]
        ]
    },
    {
        "id": "069438329a072b59",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Stop forced charge/discharge",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_battery_forced_charge_discharge_cmd"
        ],
        "data": "{ \"option\": \"Stop (default)\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1800,
        "y": 580,
        "wires": [
            [
                "a671fcb76b60063e"
            ]
        ]
    },
    {
        "id": "a671fcb76b60063e",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "5kW charge",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_forced_charge_discharge_power"
        ],
        "data": "{ \"value\": 5000 }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2050,
        "y": 580,
        "wires": [
            [
                "b1f08fad0e8ea7ed",
                "5e973e6469c373c7"
            ]
        ]
    },
    {
        "id": "9a408ecdadab50f2",
        "type": "comment",
        "z": "4e2be51fc3ef07e2",
        "name": "Get Solcast forecasts",
        "info": "",
        "x": 120,
        "y": 920,
        "wires": []
    },
    {
        "id": "8ea184053454f57d",
        "type": "comment",
        "z": "4e2be51fc3ef07e2",
        "name": "Get Solcast actuals",
        "info": "",
        "x": 130,
        "y": 1280,
        "wires": []
    },
    {
        "id": "c0db82a9405209c3",
        "type": "comment",
        "z": "4e2be51fc3ef07e2",
        "name": "Load Expected Consumption",
        "info": "",
        "x": 140,
        "y": 800,
        "wires": []
    },
    {
        "id": "3c485e695aa939bd",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Calculate Inputs",
        "func": "let remaining_generation = flow.get(\"remaining_today\");\nlet baseline_consumption = flow.get(\"baseline_consumption\");\nlet today = new Date();\nlet current_hour = today.getHours();\nmsg.decisions = []\nmsg.expected_consumption_remaining = 0;\nmsg.expected_generation_remaining = 0;\nlet consumption_minus_generating_remaining = 0;\nfor (let hour in baseline_consumption) {\n    if (Number(hour) >= current_hour) {   // <- This takes all day to midnight, not just until sun goes down\n        let consumption_this_hour = (baseline_consumption[hour] / 1000);\n        msg.expected_consumption_remaining += consumption_this_hour;\n    }\n}\n// node.warn(`baseline consumption remaining ${msg.expected_consumption_remaining.toPrecision(2)}kWh`);\n// node.warn(`generation remaining ${msg.expected_generation_remaining.toPrecision(2)}kWh`)\nmsg.net_remaining = msg.expected_consumption_remaining * -1;\n// node.warn(`generation - consumption estimate ${msg.net_remaining.toPrecision(2)}kWh`);\nmsg.remaining_battery_kwh = (msg.battery / 100) * 19.2;\n// node.warn(`battery remaining ${msg.remaining_battery_kwh.toPrecision(3)}kWh`);\nmsg.charge_required = 19.2 - msg.remaining_battery_kwh;\n// node.warn(`battery deficit ${msg.charge_required.toPrecision(3)}kWh`);\n// node.warn(`Net generation minus consumption: ${consumption_minus_generating_remaining.toPrecision(2)}kWh`);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 240,
        "wires": [
            [
                "f6c856d741587a09",
                "362fa25312f78cbc"
            ]
        ]
    },
    {
        "id": "268c295a26f8c149",
        "type": "debug",
        "z": "4e2be51fc3ef07e2",
        "name": "Debug Decision Logging",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3110,
        "y": 420,
        "wires": []
    },
    {
        "id": "a243bd55b9070d59",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Append to decision log",
        "func": "let msg2 = {}\nlet now = new Date();\nlet timestamp = now.getHours().toString().padStart(2, '0') + \":\" + now.getMinutes().toString().padStart(2, '0');\nlet datestamp = now.getDate().toString().padStart(2, '0') + \"-\" + (now.getMonth()+1).toString().padStart(2, '0') + \"-\" + now.getFullYear();\n\nmsg.filename = \"/config/node-red/decision_logs/\"+datestamp+\".csv\";\n\nlet cheap_grid_start = \"\";\nif (msg.cheapest_grid_start){\n    let peak_gen_kwh = flow.get(\"peak_gen_kwh\");\n    let peak_gen_time = flow.get(\"peak_gen_time\");\n    let forecast_pv_today = flow.get(\"forecast_pv_today\");\n    //node.warn(forecast_pv_today);\n    let remaining_pv = msg.net_remaining.toPrecision(3);\n    // let remaining_pv_label = remaining_pv > 0 ? \"Spare PV\" : \"Needed from Grid\";\n    let solar_emoji = \"😕\";\n    if (forecast_pv_today > 70) {\n        solar_emoji = \"🔆 🙌\";\n    }\n    else if (forecast_pv_today > 50) {\n        solar_emoji = \"⛅️ 🆗\";\n    }\n    else if (forecast_pv_today > 40) {\n        solar_emoji = \"☁️ 🙁\";\n    }\n    else {\n        solar_emoji = \"💩 😭\";\n    }\n    let expected_tomorrow = flow.get(\"expected_tomorrow\");\n    let tomorrow_solar_emoji = \"😕\";\n    if (expected_tomorrow > 70) {\n        tomorrow_solar_emoji = \"🔆 🙌\";\n    }\n    else if (expected_tomorrow > 50) {\n        tomorrow_solar_emoji = \"⛅️ 🆗\";\n    }\n    else if (expected_tomorrow > 40) {\n        tomorrow_solar_emoji = \"☁️ 🙁\";\n    }\n    else {\n        tomorrow_solar_emoji = \"💩 😭\";\n    }\n//${remaining_pv_label}: ${remaining_pv}kWh\n\n\n    /// Below changed as time from LocalVolts is UTC/Zulu, so need to put in right hour. Most likely a better way to do this.\n    if(msg.cheapest_grid_start[0] >= 14) {\n        msg.cheapest_grid_start[0] = msg.cheapest_grid_start[0] - 14;\n        }\n    else {\n        msg.cheapest_grid_start[0] = msg.cheapest_grid_start[0] + 10;\n    }\n    // CY - End\n\n    cheap_grid_start = msg.cheapest_grid_start[0].toString().padStart(2, '0') + \":\" + msg.cheapest_grid_start[1].toString().padStart(2, '0');\n    // msg2 = { payload: `PV forecast: ${forecast_pv_today} kWh ${solar_emoji}\n* Peak PV ${peak_gen_kwh} kWh at ${peak_gen_time}\n* Cheapest grid ${msg.cheapest_grid}c around ${cheap_grid_start}\nTomorrow's PV forecast: ${expected_tomorrow} kWh ${tomorrow_solar_emoji}` }     <-- CY backup/original\n    msg2 = { payload: `PV forecast: ${forecast_pv_today} kWh ${solar_emoji}\n* Peak PV ${peak_gen_kwh} kWh at ${peak_gen_time}\n* Cheapest grid ${msg.cheapest_grid}c around ${cheap_grid_start}\nTomorrow's PV forecast: ${expected_tomorrow} kWh ${tomorrow_solar_emoji}`}\n}\n\nlet data = [timestamp];\nif (msg.battery_w) {\n    data.push(\"Curtailment\")\n}\nelse {\n    data.push(\"Other\")\n} \ndata.push(msg.fit)\ndata.push(msg.curtailment_percentage)\ndata.push(msg.current)\ndata.push(msg.forecast)\ndata.push(msg.dc_power_now)\ndata.push(msg.load_now)\ndata.push(msg.expected_generation_remaining.toPrecision(4))\ndata.push(msg.expected_consumption_remaining.toPrecision(4))\ndata.push(msg.battery)\ndata.push(msg.net_remaining.toPrecision(4))\ndata.push(msg.remaining_battery_kwh.toPrecision(4))\ndata.push(msg.charge_required.toPrecision(3))\ndata.push(msg.battery_w)\nif (msg.cheapest_grid_start){\n    data.push(cheap_grid_start)\n}\nelse {\n    data.push(\"\")\n}\ndata.push(msg.decisions.join(\" > \"))\n// data.push(msg.decision)\n\nmsg.payload = data.join(\"\t\");\n\nreturn [msg2,msg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 360,
        "wires": [
            [
                "f0addfefc221a5b6",
                "60a043086885012a",
                "c49c6ac717d09956"
            ],
            [
                "e3338c8171b5b3a8"
            ]
        ]
    },
    {
        "id": "e3338c8171b5b3a8",
        "type": "file",
        "z": "4e2be51fc3ef07e2",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2900,
        "y": 420,
        "wires": [
            [
                "268c295a26f8c149"
            ]
        ]
    },
    {
        "id": "e77c90d32ea62a53",
        "type": "link in",
        "z": "4e2be51fc3ef07e2",
        "name": "Decision Logger",
        "links": [
            "dfde72a8e4f9222d",
            "8f826e1424c5bfd4",
            "5e973e6469c373c7",
            "10afdbc80e16938a",
            "0226c50be755c603",
            "4137a97c634901e2",
            "ab994f2e4069f4b1",
            "4ffad9fcc7fe5bbc",
            "dfbe7e6b508c747f",
            "acb3909baf66f565",
            "c53f441f2b38b1fe",
            "6c3372b06488a416"
        ],
        "x": 2505,
        "y": 360,
        "wires": [
            [
                "a243bd55b9070d59"
            ]
        ]
    },
    {
        "id": "10afdbc80e16938a",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "e77c90d32ea62a53"
        ],
        "x": 2975,
        "y": 480,
        "wires": []
    },
    {
        "id": "5e973e6469c373c7",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "e77c90d32ea62a53"
        ],
        "x": 2315,
        "y": 660,
        "wires": []
    },
    {
        "id": "dfde72a8e4f9222d",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "e77c90d32ea62a53"
        ],
        "x": 2195,
        "y": 420,
        "wires": []
    },
    {
        "id": "8f826e1424c5bfd4",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "e77c90d32ea62a53"
        ],
        "x": 1975,
        "y": 380,
        "wires": []
    },
    {
        "id": "0226c50be755c603",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "e77c90d32ea62a53"
        ],
        "x": 2415,
        "y": 200,
        "wires": []
    },
    {
        "id": "97fa225bfc29675f",
        "type": "link in",
        "z": "4e2be51fc3ef07e2",
        "name": "Send Mobile Message",
        "links": [
            "7b7a693d416828d6",
            "90a1e55ed1fb5df8",
            "c196a08e4b245777",
            "33a751d9b831e996",
            "cae89834d8f5ce11",
            "5c6df84792fd8546",
            "8e102a4b2283a0b7",
            "2b314219f58fc5ae",
            "e3692990784c5983",
            "634ccc30f857da01",
            "5f85f151eee0ec6d",
            "2eb4956dd0b77657",
            "c8fc11728d5b5573"
        ],
        "x": 2855,
        "y": 200,
        "wires": [
            [
                "fe1005e855110781"
            ]
        ]
    },
    {
        "id": "fe1005e855110781",
        "type": "rbe",
        "z": "4e2be51fc3ef07e2",
        "name": "RBE",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "payload",
        "x": 2970,
        "y": 200,
        "wires": [
            [
                "0af07176071278bb"
            ]
        ]
    },
    {
        "id": "0af07176071278bb",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Notify phone",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": true,
        "domain": "notify",
        "service": "mobile_app_sm_g990e",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{\"message\":msg.payload,\"title\":\"Energy info\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 3130,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "c0450790b9cec180",
        "type": "rbe",
        "z": "4e2be51fc3ef07e2",
        "name": "RBE",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "fit",
        "topi": "battery",
        "x": 550,
        "y": 360,
        "wires": [
            [
                "3c485e695aa939bd"
            ]
        ]
    },
    {
        "id": "3a59979c757cb320",
        "type": "comment",
        "z": "4e2be51fc3ef07e2",
        "name": "Set reserves on battery",
        "info": "",
        "x": 120,
        "y": 1720,
        "wires": []
    },
    {
        "id": "1a5c09b41064931a",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Remove 15% battery reserve",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_reserved_soc_for_backup"
        ],
        "data": "{\"value\":0}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Battery reserve removed",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 420,
        "y": 1760,
        "wires": [
            [
                "5c6df84792fd8546"
            ]
        ]
    },
    {
        "id": "d8778eb57ac4207a",
        "type": "inject",
        "z": "4e2be51fc3ef07e2",
        "d": true,
        "name": "10pm",
        "props": [
            {
                "p": "hour",
                "v": "05",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "00 22 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 1940,
        "wires": [
            [
                "4bc51398021e0522"
            ]
        ]
    },
    {
        "id": "4bc51398021e0522",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Set 15% battery reserve",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_reserved_soc_for_backup"
        ],
        "data": "{\"value\":15}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Battery reserve set at 15% until 5am",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 330,
        "y": 1940,
        "wires": [
            [
                "cae89834d8f5ce11"
            ]
        ]
    },
    {
        "id": "cae89834d8f5ce11",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "Send message",
        "mode": "link",
        "links": [
            "97fa225bfc29675f"
        ],
        "x": 505,
        "y": 1940,
        "wires": []
    },
    {
        "id": "5c6df84792fd8546",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "Send message",
        "mode": "link",
        "links": [
            "97fa225bfc29675f"
        ],
        "x": 605,
        "y": 1760,
        "wires": []
    },
    {
        "id": "2b314219f58fc5ae",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "Send message",
        "mode": "link",
        "links": [
            "97fa225bfc29675f"
        ],
        "x": 505,
        "y": 1820,
        "wires": []
    },
    {
        "id": "e66e5d75ce2006b1",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Set 50% battery reserve",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_reserved_soc_for_backup"
        ],
        "data": "{\"value\":50}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Battery reserve removed",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 330,
        "y": 1820,
        "wires": [
            [
                "2b314219f58fc5ae"
            ]
        ]
    },
    {
        "id": "1bd832f1c55e7de6",
        "type": "inject",
        "z": "4e2be51fc3ef07e2",
        "d": true,
        "name": "12pm",
        "props": [
            {
                "p": "hour",
                "v": "12",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "00 12 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 1820,
        "wires": [
            [
                "e66e5d75ce2006b1"
            ]
        ]
    },
    {
        "id": "b72a780da7b23d3b",
        "type": "inject",
        "z": "4e2be51fc3ef07e2",
        "d": true,
        "name": "6pm",
        "props": [
            {
                "p": "hour",
                "v": "18",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "00 18 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 1880,
        "wires": [
            [
                "11294a782d959748"
            ]
        ]
    },
    {
        "id": "11294a782d959748",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Remove 50% battery reserve",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_reserved_soc_for_backup"
        ],
        "data": "{\"value\":0}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Battery reserve removed",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 340,
        "y": 1880,
        "wires": [
            [
                "e3692990784c5983"
            ]
        ]
    },
    {
        "id": "e3692990784c5983",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "Send message",
        "mode": "link",
        "links": [
            "97fa225bfc29675f"
        ],
        "x": 505,
        "y": 1880,
        "wires": []
    },
    {
        "id": "4a0613cb7437b382",
        "type": "comment",
        "z": "4e2be51fc3ef07e2",
        "name": "Notify if battery is low at 3pm",
        "info": "",
        "x": 820,
        "y": 1720,
        "wires": []
    },
    {
        "id": "2474b8666b7a3a49",
        "type": "inject",
        "z": "4e2be51fc3ef07e2",
        "name": "3pm",
        "props": [
            {
                "p": "hour",
                "v": "15",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "00 15 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 770,
        "y": 1760,
        "wires": [
            [
                "39827352a2e6b5d3"
            ]
        ]
    },
    {
        "id": "39827352a2e6b5d3",
        "type": "api-current-state",
        "z": "4e2be51fc3ef07e2",
        "name": "Get Battery Level",
        "server": "5165f8c6.cc4798",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.battery_level",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "battery",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 990,
        "y": 1760,
        "wires": [
            [
                "ddca9713f00eacd0"
            ]
        ]
    },
    {
        "id": "f36cdb50385d870a",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Notify phone",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": true,
        "domain": "notify",
        "service": "mobile_app_sm_g990e",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{\"message\":msg.payload,\"title\":\"Solar Battery Level\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1450,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "ddca9713f00eacd0",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Prepare msg",
        "func": "if (msg.battery < 50) {\n    //node.warn(\"Not much battery charge left! Only \" + msg.battery)\n    msg.payload = \"WARNING: Battery level is currently at \" + msg.battery + \"%. CHARGE BATTERY!\";\n}\nelse {\n    //node.warn(\"Battery should be fine for demand period - is at \" + msg.battery)\n    msg.payload = \"Ok: Battery level is currently sufficient at \" + msg.battery + \"%\";\n}\n\n// Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1760,
        "wires": [
            [
                "f36cdb50385d870a"
            ]
        ]
    },
    {
        "id": "da5a5c681a736e03",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Export limit 0w",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_export_power_limit"
        ],
        "data": "{ \"value\": 0}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Battery export limit enforced",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 980,
        "y": 1880,
        "wires": [
            [
                "5f85f151eee0ec6d"
            ]
        ]
    },
    {
        "id": "4f234ae5046e1020",
        "type": "inject",
        "z": "4e2be51fc3ef07e2",
        "name": "7:30am",
        "props": [
            {
                "p": "hour",
                "v": "730",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "30 07 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 780,
        "y": 1880,
        "wires": [
            [
                "da5a5c681a736e03"
            ]
        ]
    },
    {
        "id": "2b72eaba7c9a1d0c",
        "type": "comment",
        "z": "4e2be51fc3ef07e2",
        "name": "Export limits",
        "info": "",
        "x": 770,
        "y": 1840,
        "wires": []
    },
    {
        "id": "5f85f151eee0ec6d",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "Send message",
        "mode": "link",
        "links": [
            "97fa225bfc29675f"
        ],
        "x": 1185,
        "y": 1880,
        "wires": []
    },
    {
        "id": "e9179e4b4a8fb4f0",
        "type": "inject",
        "z": "4e2be51fc3ef07e2",
        "name": "5:30pm",
        "props": [
            {
                "p": "hour",
                "v": "1730",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "30 17 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 780,
        "y": 1940,
        "wires": [
            [
                "2143a61fa8802dd1"
            ]
        ]
    },
    {
        "id": "2143a61fa8802dd1",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Export limit 5kW",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_export_power_limit"
        ],
        "data": "{ \"value\": 5000}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Battery export limit removed",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 980,
        "y": 1940,
        "wires": [
            [
                "2eb4956dd0b77657"
            ]
        ]
    },
    {
        "id": "2eb4956dd0b77657",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "Send message",
        "mode": "link",
        "links": [
            "97fa225bfc29675f"
        ],
        "x": 1185,
        "y": 1940,
        "wires": []
    },
    {
        "id": "4f8cbb12677b3618",
        "type": "comment",
        "z": "4e2be51fc3ef07e2",
        "name": "Force Charge/Stop Buttons",
        "info": "",
        "x": 150,
        "y": 2000,
        "wires": []
    },
    {
        "id": "978738e60dc4502e",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Export limit 5.5kW",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_export_power_limit"
        ],
        "data": "{ \"value\": 5500}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Battery export limit removed",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 350,
        "y": 2040,
        "wires": [
            [
                "cc78b7f261dc183b"
            ]
        ]
    },
    {
        "id": "cc78b7f261dc183b",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Remove battery reserve",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_reserved_soc_for_backup"
        ],
        "data": "{\"value\":0}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Battery reserve removed",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 590,
        "y": 2040,
        "wires": [
            [
                "c550f5fdae898d99"
            ]
        ]
    },
    {
        "id": "c550f5fdae898d99",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "EMS Forced Mode",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_ems_mode"
        ],
        "data": "{ \"option\": \"Forced mode\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 850,
        "y": 2040,
        "wires": [
            [
                "98af02209026ae34"
            ]
        ]
    },
    {
        "id": "98af02209026ae34",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Force discharge",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_battery_forced_charge_discharge_cmd"
        ],
        "data": "{ \"option\": \"Forced discharge\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1060,
        "y": 2040,
        "wires": [
            [
                "8caa64c6192ee4dd"
            ]
        ]
    },
    {
        "id": "8caa64c6192ee4dd",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "8kw Discharge Limit",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_forced_charge_discharge_power"
        ],
        "data": "{ \"value\": 8000 }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Force discharge enabled",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 1280,
        "y": 2040,
        "wires": [
            [
                "ab994f2e4069f4b1"
            ]
        ]
    },
    {
        "id": "ab994f2e4069f4b1",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "e77c90d32ea62a53"
        ],
        "x": 1485,
        "y": 2040,
        "wires": []
    },
    {
        "id": "e7a5f0bf88672c69",
        "type": "server-state-changed",
        "z": "4e2be51fc3ef07e2",
        "name": "Force discharge now",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entityId": "input_button.force_discharge_now",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 130,
        "y": 2040,
        "wires": [
            [
                "978738e60dc4502e"
            ]
        ]
    },
    {
        "id": "4ffc942964cd0395",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Export limit 0w",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_export_power_limit"
        ],
        "data": "{ \"value\": 0}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Battery export limit removed",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 360,
        "y": 2180,
        "wires": [
            [
                "bab839a1bb3fd583"
            ]
        ]
    },
    {
        "id": "bab839a1bb3fd583",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Add 15% battery reserve",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_reserved_soc_for_backup"
        ],
        "data": "{\"value\":15}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Battery reserve of 15% added",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 590,
        "y": 2180,
        "wires": [
            [
                "41a5373e30be9e6b"
            ]
        ]
    },
    {
        "id": "41a5373e30be9e6b",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "EMS Self-Consumption Mode",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_ems_mode"
        ],
        "data": "{ \"option\": \"Self-consumption mode (default)\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 850,
        "y": 2180,
        "wires": [
            [
                "d4bb9e5f2ee558a5"
            ]
        ]
    },
    {
        "id": "d4bb9e5f2ee558a5",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Force discharge stop",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_battery_forced_charge_discharge_cmd"
        ],
        "data": "{ \"option\": \"Stop (default)\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1100,
        "y": 2180,
        "wires": [
            [
                "536f99ead8145939"
            ]
        ]
    },
    {
        "id": "536f99ead8145939",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Remove Discharge Rate",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_forced_charge_discharge_power"
        ],
        "data": "{ \"value\": 0 }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Force discharge stopped",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 1330,
        "y": 2180,
        "wires": [
            [
                "4ffad9fcc7fe5bbc"
            ]
        ]
    },
    {
        "id": "4ffad9fcc7fe5bbc",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "e77c90d32ea62a53"
        ],
        "x": 1485,
        "y": 2180,
        "wires": []
    },
    {
        "id": "53253a8d548e48b2",
        "type": "server-state-changed",
        "z": "4e2be51fc3ef07e2",
        "name": "Stop force discharge now",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entityId": "input_button.stop_forced_discharge_100w_15",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 150,
        "y": 2180,
        "wires": [
            [
                "4ffc942964cd0395"
            ]
        ]
    },
    {
        "id": "895b65ba79985f09",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Export limit 5kW",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_export_power_limit"
        ],
        "data": "{ \"value\": 5000}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Battery export limit removed",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 360,
        "y": 2300,
        "wires": [
            [
                "741c6c7c8d7c6620"
            ]
        ]
    },
    {
        "id": "741c6c7c8d7c6620",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Add 50% battery reserve",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_reserved_soc_for_backup"
        ],
        "data": "{\"value\":50}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Battery reserve of 50% added",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 590,
        "y": 2300,
        "wires": [
            [
                "5b69dac40d8fb752"
            ]
        ]
    },
    {
        "id": "5b69dac40d8fb752",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "EMS Self-Consumption Mode",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_ems_mode"
        ],
        "data": "{ \"option\": \"Self-consumption mode (default)\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 850,
        "y": 2300,
        "wires": [
            [
                "b4e27c6dcc99b9de"
            ]
        ]
    },
    {
        "id": "b4e27c6dcc99b9de",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Force discharge stop",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_battery_forced_charge_discharge_cmd"
        ],
        "data": "{ \"option\": \"Stop (default)\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1100,
        "y": 2300,
        "wires": [
            [
                "5c07ee0421cb7e4d"
            ]
        ]
    },
    {
        "id": "5c07ee0421cb7e4d",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Remove Discharge Rate",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_forced_charge_discharge_power"
        ],
        "data": "{ \"value\": 0 }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Force discharge stopped",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 1330,
        "y": 2300,
        "wires": [
            [
                "dfbe7e6b508c747f"
            ]
        ]
    },
    {
        "id": "dfbe7e6b508c747f",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "e77c90d32ea62a53"
        ],
        "x": 1485,
        "y": 2300,
        "wires": []
    },
    {
        "id": "6557226432e3d612",
        "type": "server-state-changed",
        "z": "4e2be51fc3ef07e2",
        "name": "Stop force discharge now",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entityId": "input_button.stop_forced_dischage_now_5_5kw_50",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 150,
        "y": 2300,
        "wires": [
            [
                "895b65ba79985f09"
            ]
        ]
    },
    {
        "id": "92e00b4fff96fb9b",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Export limit 5kW",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_export_power_limit"
        ],
        "data": "{ \"value\": 5000}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Battery export limit removed",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 360,
        "y": 2360,
        "wires": [
            [
                "fb9fbaabd8e919d1"
            ]
        ]
    },
    {
        "id": "fb9fbaabd8e919d1",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Remove battery reserve",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_reserved_soc_for_backup"
        ],
        "data": "{\"value\":0}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Battery reserve removed",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 590,
        "y": 2360,
        "wires": [
            [
                "5c012c6fee57a90d"
            ]
        ]
    },
    {
        "id": "5c012c6fee57a90d",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "EMS Self-Consumption Mode",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_ems_mode"
        ],
        "data": "{ \"option\": \"Self-consumption mode (default)\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 850,
        "y": 2360,
        "wires": [
            [
                "80d608c9ed1bb306"
            ]
        ]
    },
    {
        "id": "80d608c9ed1bb306",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Force discharge stop",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_battery_forced_charge_discharge_cmd"
        ],
        "data": "{ \"option\": \"Stop (default)\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1100,
        "y": 2360,
        "wires": [
            [
                "f7ebd0208075b11f"
            ]
        ]
    },
    {
        "id": "f7ebd0208075b11f",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Remove Discharge Rate",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_forced_charge_discharge_power"
        ],
        "data": "{ \"value\": 0 }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Force discharge stopped",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 1330,
        "y": 2360,
        "wires": [
            [
                "acb3909baf66f565"
            ]
        ]
    },
    {
        "id": "acb3909baf66f565",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "e77c90d32ea62a53"
        ],
        "x": 1485,
        "y": 2360,
        "wires": []
    },
    {
        "id": "199b72cc4dc05627",
        "type": "server-state-changed",
        "z": "4e2be51fc3ef07e2",
        "name": "Stop force discharge now",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entityId": "input_button.stop_forced_discharge_5_5kw_0",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 150,
        "y": 2360,
        "wires": [
            [
                "92e00b4fff96fb9b"
            ]
        ]
    },
    {
        "id": "583b322a9b9b4f22",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Export limit 0w",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_export_power_limit"
        ],
        "data": "{ \"value\": 0}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Battery export limit removed",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 360,
        "y": 2240,
        "wires": [
            [
                "3d13c0c306b4b4ae"
            ]
        ]
    },
    {
        "id": "3d13c0c306b4b4ae",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Removed battery reserve",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_reserved_soc_for_backup"
        ],
        "data": "{\"value\":0}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Battery reserve removed",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 590,
        "y": 2240,
        "wires": [
            [
                "2065bfb1a9398d19"
            ]
        ]
    },
    {
        "id": "2065bfb1a9398d19",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "EMS Self-Consumption Mode",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_ems_mode"
        ],
        "data": "{ \"option\": \"Self-consumption mode (default)\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 850,
        "y": 2240,
        "wires": [
            [
                "d9b3cffc3ff558fa"
            ]
        ]
    },
    {
        "id": "d9b3cffc3ff558fa",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Force discharge stop",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_battery_forced_charge_discharge_cmd"
        ],
        "data": "{ \"option\": \"Stop (default)\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1100,
        "y": 2240,
        "wires": [
            [
                "43c47759e2728ca2"
            ]
        ]
    },
    {
        "id": "43c47759e2728ca2",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Remove Discharge Rate",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_forced_charge_discharge_power"
        ],
        "data": "{ \"value\": 0 }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Force discharge stopped",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 1330,
        "y": 2240,
        "wires": [
            [
                "c53f441f2b38b1fe"
            ]
        ]
    },
    {
        "id": "c53f441f2b38b1fe",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "e77c90d32ea62a53"
        ],
        "x": 1485,
        "y": 2240,
        "wires": []
    },
    {
        "id": "493be16ce2d28504",
        "type": "server-state-changed",
        "z": "4e2be51fc3ef07e2",
        "name": "Stop force discharge now",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entityId": "input_button.stop_forced_discharge_100w_0",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 150,
        "y": 2240,
        "wires": [
            [
                "583b322a9b9b4f22"
            ]
        ]
    },
    {
        "id": "588180a6fd96d1bc",
        "type": "server-state-changed",
        "z": "4e2be51fc3ef07e2",
        "name": "Sunrise Trigger (-1.25hrs)",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entityId": "input_button.sunrise_trigger",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 130,
        "y": 1760,
        "wires": [
            [
                "1a5c09b41064931a"
            ]
        ]
    },
    {
        "id": "12ccb7522c6380bf",
        "type": "traffic",
        "z": "4e2be51fc3ef07e2",
        "name": "allow_or_stop",
        "property_allow": "payload",
        "filter_allow": "true",
        "ignore_case_allow": true,
        "negate_allow": false,
        "send_allow": false,
        "property_stop": "payload",
        "filter_stop": "false",
        "ignore_case_stop": true,
        "negate_stop": false,
        "send_stop": false,
        "default_start": true,
        "differ": false,
        "x": 400,
        "y": 180,
        "wires": [
            [
                "e176b5b312f0d4d3"
            ]
        ]
    },
    {
        "id": "586691e185c1e930",
        "type": "ha-switch",
        "z": "4e2be51fc3ef07e2",
        "name": "Energy_control_switch",
        "version": 0,
        "debugenabled": false,
        "inputs": 0,
        "outputs": 2,
        "entityConfig": "39a507ed6f81ba8d",
        "enableInput": false,
        "outputOnStateChange": true,
        "outputProperties": [
            {
                "property": "outputType",
                "propertyType": "msg",
                "value": "state change",
                "valueType": "str"
            },
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "x": 160,
        "y": 120,
        "wires": [
            [
                "12ccb7522c6380bf"
            ],
            [
                "12ccb7522c6380bf"
            ]
        ]
    },
    {
        "id": "48e5b438de6c5060",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Charge/discharge/shutdown",
        "func": "let today = new Date();\n//node.warn(\"hour now is \" + today.getHours());\n//node.warn(msg.current + \" and battery \" + msg.battery);\n//node.warn(msg.net_remaining+\";\"+msg.charge_required)\n//node.warn(msg.forecast_obj)\n\nlet forecasts = msg.forecast_obj.attributes.forecast;\nmsg.grid_forecasts = []\nmsg.fit_forecasts = []\n\nmsg.cheapest_grid_start = undefined\nmsg.best_fit_start = undefined\n\nmsg.time_blocks_grid = {}\nmsg.time_blocks_fit = {}\nmsg.cheapest_grid = 1000\nmsg.best_fit = -1000\nmsg.cheapest_grid_time = undefined\nmsg.best_fit_time = undefined\n\nlet grid_buy_price_day = msg.grid_buy_price_day / 100;\nlet grid_buy_price_night_spike_prep = msg.grid_buy_price_night_spike_prep / 100;\nlet grid_sell_price_day = msg.grid_sell_price_day / 100;\nlet grid_sell_price_night = msg.grid_sell_price_night / 100;\nlet grid_buy_price_day_spike_prep = msg.grid_buy_price_day_spike_prep / 100;\n\nlet minbuy4hrs = msg.minbuy4hrs;\n\nfor (let i=0; i<forecasts.length-4; i++) {\n    msg.grid_forecasts.push(forecasts[i].costsFlexUp);\n    msg.fit_forecasts.push(forecasts[i].earningsFlexUp);\n    if (msg.cheapest_grid > forecasts[i].costsFlexUp) {\n        msg.cheapest_grid_time = forecasts[i].intervalStart;      \n        msg.cheapest_grid = forecasts[i].costsFlexUp;\n    }\n    if (msg.best_fit < forecasts[i].earningsFlexUp) {\n        msg.best_fit_time = forecasts[i].intervalStart;\n        msg.best_fit = forecasts[i].earningsFlexUp;\n    }\n    msg.time_blocks_grid[forecasts[i].intervalStart] = 0\n    msg.time_blocks_fit[forecasts[i].intervalStart] = 0\n    for (let j=0; j<4; j++) {\n        msg.time_blocks_grid[forecasts[i].intervalStart] += forecasts[i+j].costsFlexUp\n        msg.time_blocks_fit[forecasts[i].intervalStart] += forecasts[i+j].earningsFlexUp\n    }\n    msg.time_blocks_grid[forecasts[i].intervalStart] = Number((msg.time_blocks_grid[forecasts[i].intervalStart]/6).toPrecision(2))\n    msg.time_blocks_fit[forecasts[i].intervalStart] = Number((msg.time_blocks_fit[forecasts[i].intervalStart]/6).toPrecision(2))\n\n    //node.warn(\"time_blocks_grid: \" + msg.time_blocks_grid[forecasts[i].intervalStart]);\n}\nlet cheapest_grid_block = 1000\n\nfor (let block in msg.time_blocks_grid) {\n    //node.warn(\"time_blocks_grid: \" + block);\n    let [hour,minute] = block.split('T')[1].split(\"+\")[0].split(\":\").slice(0, 2)\n    if (Number(hour) < 18 && msg.time_blocks_grid[block] < cheapest_grid_block) {\n        msg.cheapest_grid_start = [Number(hour),Number(minute)];\n        cheapest_grid_block = msg.time_blocks_grid[block]\n    }\n    else {\n        // node.warn(cheapest_grid_block + \" is cheaper than or same as \" + msg.time_blocks_grid[block])\n    }\n}\nlet best_fit_block = -1000\nfor (let block in msg.time_blocks_fit) {\n    let [hour,minute] = block.split('T')[1].split(\"+\")[0].split(\":\").slice(0, 2)\n    if (Number(hour) < 18 && msg.time_blocks_fit[block] > best_fit_block) {\n        msg.best_fit_start = [Number(hour),Number(minute)];\n        best_fit_block = msg.time_blocks_fit[block]\n    }\n}\n\n// Charge up to 40% during the night if the price is cheapish (30c or less, roughly, from HASS slider) and upcoming sell price likely to be 60c or greater (from HASS), to get ready for potential morning shoulder higher feed-in tarrif\nif (today.getHours() >= 4 && today.getHours() < 5 && msg.current <= grid_buy_price_night_spike_prep && msg.battery < 40 && msg.maxsell4hrs > grid_sell_price_night) {\n    msg.decision = \"Opportunity to charge battery to 40% for shoulder period, battery is at\" + msg.battery + \"% and price is \" + msg.current\n    msg.decisions.push(msg.decision)\n    return [msg, null, null]\n}\n\n// node.warn(\"cheapest grid starting at \"+msg.cheapest_grid_start.join(\":\"));\n// node.warn(today.getHours() >= Number(msg.cheapcheapest_grid_startest_grid_start[0]))\n// node.warn(today.getMinutes() >= Number(msg.cheapest_grid_start[1]))\n// node.warn(msg)\n// less than or equal to 0 decisions\nif (msg.current <= 0) {\n    //if (msg.battery <= 98) {\n    //if (msg.battery <= 98 && (today.getHours() <16 || today.getHours() > 21)) {\n        // added next line to make sure that only buy when it is the cheapest part of the next 4 hrs (within 10% of the cheapest)\n    if (msg.battery <= 98 && msg.current <= (minbuy4hrs * .9) && (today.getHours() <16 || today.getHours() > 21)) {\n        // node.warn(\"FREE ELECTRICITY and battery <= 98\");\n        msg.decision = \"Free electricity from grid, cheap part of next 4 hrs, so fast charging\";\n        msg.decisions.push(msg.decision)\n        return [msg,null,null]\n    }\n    //shut down inverter\n    //else if (msg.current < -.03 && msg.forecast < 0) {\n    else if (msg.current < -.03 && msg.forecast < 0 && (today.getHours() < 16 || today.getHours() > 21)) {\n        // node.warn(\"Being paid more than 3c to use from grid, and forecast is negative too\");\n        msg.decision = \"Being paid more than 3c to use from grid, so shutting down inverter\";\n        msg.decisions.push(msg.decision)\n        return [null, null, msg]\n    }\n}\n// Check if battery is less than 50% charged at 3pm.\n// We need to prepare for the demand period at 6pm so get enough charge in the battery to get us through that peak.\nelse if (today.getHours() >= 14 && today.getHours() < 16 && msg.current <= grid_buy_price_day && msg.battery < 90) {\n    // If battery is under 90%, charge it up if the price is under roughly 25c/kWh (from HASS)\n    // node.warn(\"Need to charge battery to prepare for demand period since the battery is only at\" + msg.battery + \"%\")\n    msg.decision = \"Need to charge battery to 90% to prepare for upcomging demand period since the battery is only at\" + msg.battery +\"%\"\n    msg.decisions.push(msg.decision)\n    return [msg,null,null]\n}\n// Check if battery is less than 100% charged at 3pm and whether there is a major spike coming (definition, > $2/kWh sell price).\n// We need to prepare for this spike period, if true, so fully charge battery.\n// Will only charge if current price is 40c/kWh or below (defined in HASS)\nelse if (today.getHours() >= 15 && today.getHours() < 16 && msg.current <= grid_buy_price_day_spike_prep && msg.battery < 100 && msg.maxsell4hrs > grid_sell_price_day) {\n    // If battery is not fully charged, charge it up if the price is under roughly 40c/kWh (from HASS) because there is going to be a sell price of over roughly $2/kwh (from HASS) within the next 4 hours\n    // node.warn(\"Need to charge battery to prepare for demand period since the battery is only at\" + msg.battery + \"%\")\n    msg.decision = \"Need to charge battery to 100% to prepare for upcoming spike since the battery is only at\" + msg.battery + \"% and sell price expected to be up to $\" + msg.maxsell4hrs;\n    msg.decisions.push(msg.decision)\n    return [msg,null,null]\n}\n//very cheap power decisions\n//else if (msg.current <= .04 && msg.battery < 75 && today.getHours() > 12) {\nelse if (msg.current <= .04 && msg.battery < 75 && today.getHours() > 12 && (today.getHours() < 16 || today.getHours() >= 21)) {\n    // node.warn(\"very cheap charging and battery low for afternoon\")\n    msg.decision = \"After 1pm, very cheap grid, battery low, so force-charging\";\n    msg.decisions.push(msg.decision)\n    return [msg, null, null]\n}\nelse if (msg.current <= .04 && msg.battery < 30 && today.getHours() < 8) {\n    // node.warn(\"very cheap charging and battery low for morning\")\n    msg.decision = \"Before 7am, very cheap grid, battery low, so force-charging\";\n    msg.decisions.push(msg.decision)\n    return [msg, null, null]\n}\nelse if (msg.current < grid_buy_price_day && msg.battery < 100 && today.getHours() > 10 && today.getHours() < 16) {\n    // node.warn(\"Little generation left and price is cheap so force charging\");\n    // grid_buy_price_day is taken from HASS slider\n    msg.decision = \"Between 10am and 4pm, < \" + grid_buy_price_day  + \", battery < 100, so force-charging\";\n    msg.decisions.push(msg.decision)\n    return [msg, null, null]\n}\nelse if (msg.current < grid_buy_price_day && msg.battery < 100 && today.getHours() >= Number(msg.cheapest_grid_start[0]) && today.getHours() < (Number(msg.cheapest_grid_start[0])+3) && today.getMinutes() >= Number(msg.cheapest_grid_start[1])) {\n    if(today.getHours() > 8 && today.getHours() < 16) {\n    // node.warn(\"Not enough generation left to fully charge battery so force charging\");\n    msg.decision = \"In cheapest grid period, generation remaining not enough to charge battery, so force-charging\";\n    msg.decisions.push(msg.decision)\n    return [msg, null, null]\n    }\n}\nelse {\n    // node.warn(\"Not worth charging battery from grid, not worth shutting down inverter\");\n    msg.decision = \"Not worth charging battery from grid, not worth shutting down inverter\";\n    msg.decisions.push(msg.decision)\n    return [null, msg, null]\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 520,
        "wires": [
            [
                "2811c8a2e5c7d605"
            ],
            [
                "f14e76209d58a14c"
            ],
            [
                "039ccf2e04eeb158"
            ]
        ]
    },
    {
        "id": "f44f4af69d237a79",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Get forecast high/low sell price 4hrs",
        "func": "let forecasts = msg.forecast_obj.attributes.forecast;\n\nlet sellprice = null;\nlet maxsellprice = null;\nlet minsellprice = null;\n\n// 48 = 4hrs of 5min intervals\n\n// temp\nmaxsellprice = forecasts[0].earningsFlexUp;\nminsellprice = forecasts[0].earningsFlexUp;\n\nfor (let i = 1; i <= 47; i++) {\n    sellprice = forecasts[i].earningsFlexUp;\n\n    if (sellprice > maxsellprice) {\n        maxsellprice = sellprice;\n    }\n    \n    if (sellprice < minsellprice) {\n        minsellprice = sellprice;\n    }\n}\n\nmsg.maxsell4hrs = maxsellprice;\nmsg.minsell4hrs = minsellprice;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 580,
        "wires": [
            [
                "2b9a2aae2524f1bb",
                "8848556d13186a49"
            ]
        ]
    },
    {
        "id": "6abeeb8ff3b8ba02",
        "type": "server-state-changed",
        "z": "4e2be51fc3ef07e2",
        "name": "Force charge now",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entityId": "input_button.force_charge_now",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 130,
        "y": 2100,
        "wires": [
            [
                "93b6cadab55fe25a"
            ]
        ]
    },
    {
        "id": "93b6cadab55fe25a",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "EMS Forced Mode",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_ems_mode"
        ],
        "data": "{ \"option\": \"Forced mode\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 350,
        "y": 2100,
        "wires": [
            [
                "dee56f3ac8b85fd7"
            ]
        ]
    },
    {
        "id": "dee56f3ac8b85fd7",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "Force charge",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.set_sg_battery_forced_charge_discharge_cmd"
        ],
        "data": "{ \"option\": \"Forced charge\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 550,
        "y": 2100,
        "wires": [
            [
                "bf78967404a11949"
            ]
        ]
    },
    {
        "id": "bf78967404a11949",
        "type": "api-call-service",
        "z": "4e2be51fc3ef07e2",
        "name": "10kw Charge Limit",
        "server": "5165f8c6.cc4798",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.set_sg_forced_charge_discharge_power"
        ],
        "data": "{ \"value\": 10000 }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "Force charge enabled",
                "valueType": "str"
            }
        ],
        "queue": "none",
        "x": 850,
        "y": 2100,
        "wires": [
            [
                "6c3372b06488a416"
            ]
        ]
    },
    {
        "id": "6c3372b06488a416",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "e77c90d32ea62a53"
        ],
        "x": 1005,
        "y": 2100,
        "wires": []
    },
    {
        "id": "fcb4566aef38fe1f",
        "type": "api-current-state",
        "z": "4e2be51fc3ef07e2",
        "name": "Get buy price for prep (day)",
        "server": "5165f8c6.cc4798",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.grid_buy_price_day",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "grid_buy_price_day",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 860,
        "y": 700,
        "wires": [
            [
                "802ff872e6acd59a"
            ]
        ]
    },
    {
        "id": "802ff872e6acd59a",
        "type": "api-current-state",
        "z": "4e2be51fc3ef07e2",
        "name": "Get buy price for spike prep (night)",
        "server": "5165f8c6.cc4798",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.grid_buy_price_night_spike_prep",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "grid_buy_price_night_spike_prep",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 760,
        "y": 640,
        "wires": [
            [
                "44b8f7bea94e8bc8"
            ]
        ]
    },
    {
        "id": "c86bc1ec454d44ad",
        "type": "api-current-state",
        "z": "4e2be51fc3ef07e2",
        "name": "Get sell price for spike (night)",
        "server": "5165f8c6.cc4798",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.grid_sell_price_night",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "grid_sell_price_night",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 660,
        "y": 580,
        "wires": [
            [
                "b27d47bfd5e236f9"
            ]
        ]
    },
    {
        "id": "b27d47bfd5e236f9",
        "type": "api-current-state",
        "z": "4e2be51fc3ef07e2",
        "name": "Get sell price for spile (Day)",
        "server": "5165f8c6.cc4798",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.grid_sell_price_day",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "grid_sell_price_day",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 940,
        "y": 580,
        "wires": [
            [
                "211f8e6161b1576e"
            ]
        ]
    },
    {
        "id": "44b8f7bea94e8bc8",
        "type": "api-current-state",
        "z": "4e2be51fc3ef07e2",
        "name": "Get buy price for spike prep (day)",
        "server": "5165f8c6.cc4798",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.grid_buy_price_day_spike_prep",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "grid_buy_price_day_spike_prep",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1080,
        "y": 640,
        "wires": [
            [
                "c86bc1ec454d44ad"
            ]
        ]
    },
    {
        "id": "2b9a2aae2524f1bb",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Get forecast high/low buy price 4hrs",
        "func": "let forecasts = msg.forecast_obj.attributes.forecast;\nlet buyprice = null;\nlet minbuyprice = null;\nlet maxbuyprice = null;\n\nmaxbuyprice = forecasts[0].costsFlexUp;\nminbuyprice = forecasts[0].costsFlexUp;\n\n// 48 = 4hrs of 5min intervals\nfor (let i = 1; i <= 47; i++) {\n    buyprice = forecasts[i].costsFlexUp;\n\n    if (buyprice < minbuyprice) {\n        minbuyprice = buyprice;\n    }\n    if (buyprice > maxbuyprice) {\n        maxbuyprice = buyprice;\n    }\n}\n \nmsg.minbuy4hrs = minbuyprice;\nmsg.maxbuy4hrs = maxbuyprice;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 700,
        "wires": [
            [
                "fcb4566aef38fe1f",
                "34443eae29aba119"
            ]
        ]
    },
    {
        "id": "34443eae29aba119",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Update buy sensors",
        "func": "let lowestbuy4hrs = msg.minbuy4hrs;\nlet highestbuy4hrs = msg.maxbuy4hrs;\n\nmsg.payloadlow = {\n    data: {\n        state: msg.minbuy4hrs,\n        entity_id: `sensor.lowestbuy4hrs`,\n        attributes: {\n            'name': 'lowest_buy_4hrs',\n            'entries': [\n                {'title': 'LOWEST_BUY_4HRS', lowestbuy4hrs}\n            ],\n            friendly_name: 'Lowest buy price in next 4hrs',\n            icon: 'mdi:currency-usd'\n        }\n    }\n}\n\nmsg.payloadhigh = {\n    data: {\n        state: msg.maxbuy4hrs,\n        entity_id: `sensor.highestbuy4hrs`,\n        attributes: {\n            'name': 'highest_buy_4hrs',\n            'entries': [\n                { 'title': 'HIGHEST_BUY_4HRS', highestbuy4hrs }\n            ],\n            friendly_name: 'Highest buy price in next 4hrs',\n            icon: 'mdi:currency-usd'\n        }\n    }\n}\n    \nreturn [\n    {payload: msg.payloadlow, entity_id: 'sensor.lowestbuy4hrs'},\n    {payload: msg.payloadhigh, entity_id: 'sensor.highestbuy4hrs'}\n    ];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 760,
        "wires": [
            [
                "3190540c1c7916b8"
            ],
            [
                "3190540c1c7916b8"
            ]
        ]
    },
    {
        "id": "3190540c1c7916b8",
        "type": "ha-api",
        "z": "4e2be51fc3ef07e2",
        "name": "sensor",
        "server": "5165f8c6.cc4798",
        "version": 1,
        "debugenabled": false,
        "protocol": "http",
        "method": "post",
        "path": "/api/states/{{entity_id}}",
        "data": "",
        "dataType": "json",
        "responseType": "text",
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "results"
            }
        ],
        "x": 690,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "8848556d13186a49",
        "type": "function",
        "z": "4e2be51fc3ef07e2",
        "name": "Update sell sensors",
        "func": "let highestsell4hrs = msg.maxsell4hrs\nlet lowestsell4hrs = msg.minsell4hrs\n\nmsg.payloadhigh = {\n    data: {\n        state: msg.maxsell4hrs,\n        entity_id: `sensor.highestsell4hrs`,\n        attributes: {\n            'name': 'highest_sell_4hrs',\n            'entries': [\n                {'title': 'HIGHEST_SELL_4HRS', highestsell4hrs}\n            ],\n            friendly_name: 'Highest sell price in next 4hrs',\n            icon: 'mdi:currency-usd'\n        }\n    }\n}\n\nmsg.payloadlow = {\n    data: {\n        state: msg.minsell4hrs,\n        entity_id: `sensor.lowestsell4hrs`,\n        attributes: {\n            'name': 'lowest_sell_4hrs',\n            'entries': [\n                {'title': 'LOWEST_SELL_4HRS', lowestsell4hrs}\n            ],\n            friendly_name: 'Lowest sell price in next 4hrs',\n            icon: 'mdi:currency-usd'\n        }\n    }\n}\n\nreturn [\n    {payload: msg.payloadhigh, entity_id: 'sensor.highestsell4hrs'},\n    {payload: msg.payloadlow, entity_id: 'sensor.lowestsell4hrs'}\n];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 640,
        "wires": [
            [
                "abbe5978f5e049f1"
            ],
            [
                "abbe5978f5e049f1"
            ]
        ]
    },
    {
        "id": "abbe5978f5e049f1",
        "type": "ha-api",
        "z": "4e2be51fc3ef07e2",
        "name": "sensor",
        "server": "5165f8c6.cc4798",
        "version": 1,
        "debugenabled": false,
        "protocol": "http",
        "method": "post",
        "path": "/api/states/{{entity_id}}",
        "data": "",
        "dataType": "json",
        "responseType": "text",
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "results"
            }
        ],
        "x": 310,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "9ba9e369981064bb",
        "type": "comment",
        "z": "4e2be51fc3ef07e2",
        "name": "FIT < 0c",
        "info": "",
        "x": 1180,
        "y": 60,
        "wires": []
    },
    {
        "id": "d57db3db51a05164",
        "type": "comment",
        "z": "4e2be51fc3ef07e2",
        "name": "FIT >= 0c",
        "info": "",
        "x": 1180,
        "y": 140,
        "wires": []
    },
    {
        "id": "7b7a693d416828d6",
        "type": "link out",
        "z": "4e2be51fc3ef07e2",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "97fa225bfc29675f"
        ],
        "x": 3075,
        "y": 300,
        "wires": []
    },
    {
        "id": "f0addfefc221a5b6",
        "type": "within-time-switch",
        "z": "4e2be51fc3ef07e2",
        "name": "6pm-6:30pm",
        "nameInt": "",
        "positionConfig": "5e71c4ffa9baa60b",
        "startTime": "18:00",
        "startTimeType": "entered",
        "startOffset": 0,
        "startOffsetType": "none",
        "startOffsetMultiplier": 60000,
        "endTime": "18:30",
        "endTimeType": "entered",
        "endOffset": 0,
        "endOffsetType": "none",
        "endOffsetMultiplier": 60000,
        "timeRestrictions": 0,
        "timeRestrictionsType": "none",
        "timeDays": "*",
        "timeOnlyOddDays": false,
        "timeOnlyEvenDays": false,
        "timeOnlyOddWeeks": false,
        "timeOnlyEvenWeeks": false,
        "timeMonths": "*",
        "timedatestart": "",
        "timedateend": "",
        "propertyStart": "",
        "propertyStartType": "none",
        "propertyStartCompare": "true",
        "propertyStartThreshold": "",
        "propertyStartThresholdType": "num",
        "startTimeAlt": "",
        "startTimeAltType": "entered",
        "startOffsetAlt": 0,
        "startOffsetAltType": "none",
        "startOffsetAltMultiplier": 60000,
        "propertyEnd": "",
        "propertyEndType": "none",
        "propertyEndCompare": "true",
        "propertyEndThreshold": "",
        "propertyEndThresholdType": "num",
        "endTimeAlt": "",
        "endTimeAltType": "entered",
        "endOffsetAlt": 0,
        "endOffsetAltType": "none",
        "endOffsetAltMultiplier": 60000,
        "withinTimeValue": "",
        "withinTimeValueType": "msgInput",
        "outOfTimeValue": "false",
        "outOfTimeValueType": "msgInput",
        "tsCompare": "0",
        "x": 2910,
        "y": 360,
        "wires": [
            [
                "7b7a693d416828d6"
            ],
            []
        ]
    },
    {
        "id": "60a043086885012a",
        "type": "within-time-switch",
        "z": "4e2be51fc3ef07e2",
        "name": "12pm-12:30pm",
        "nameInt": "",
        "positionConfig": "5e71c4ffa9baa60b",
        "startTime": "12:00",
        "startTimeType": "entered",
        "startOffset": 0,
        "startOffsetType": "none",
        "startOffsetMultiplier": 60000,
        "endTime": "12:30",
        "endTimeType": "entered",
        "endOffset": 0,
        "endOffsetType": "none",
        "endOffsetMultiplier": 60000,
        "timeRestrictions": 0,
        "timeRestrictionsType": "none",
        "timeDays": "*",
        "timeOnlyOddDays": false,
        "timeOnlyEvenDays": false,
        "timeOnlyOddWeeks": false,
        "timeOnlyEvenWeeks": false,
        "timeMonths": "*",
        "timedatestart": "",
        "timedateend": "",
        "propertyStart": "",
        "propertyStartType": "none",
        "propertyStartCompare": "true",
        "propertyStartThreshold": "",
        "propertyStartThresholdType": "num",
        "startTimeAlt": "",
        "startTimeAltType": "entered",
        "startOffsetAlt": 0,
        "startOffsetAltType": "none",
        "startOffsetAltMultiplier": 60000,
        "propertyEnd": "",
        "propertyEndType": "none",
        "propertyEndCompare": "true",
        "propertyEndThreshold": "",
        "propertyEndThresholdType": "num",
        "endTimeAlt": "",
        "endTimeAltType": "entered",
        "endOffsetAlt": 0,
        "endOffsetAltType": "none",
        "endOffsetAltMultiplier": 60000,
        "withinTimeValue": "",
        "withinTimeValueType": "msgInput",
        "outOfTimeValue": "false",
        "outOfTimeValueType": "msgInput",
        "tsCompare": "0",
        "x": 2920,
        "y": 300,
        "wires": [
            [
                "7b7a693d416828d6"
            ],
            []
        ]
    },
    {
        "id": "c49c6ac717d09956",
        "type": "within-time-switch",
        "z": "4e2be51fc3ef07e2",
        "name": "8am-8:30am",
        "nameInt": "",
        "positionConfig": "5e71c4ffa9baa60b",
        "startTime": "08:00",
        "startTimeType": "entered",
        "startOffset": 0,
        "startOffsetType": "none",
        "startOffsetMultiplier": 60000,
        "endTime": "08:30",
        "endTimeType": "entered",
        "endOffset": 0,
        "endOffsetType": "none",
        "endOffsetMultiplier": 60000,
        "timeRestrictions": 0,
        "timeRestrictionsType": "none",
        "timeDays": "*",
        "timeOnlyOddDays": false,
        "timeOnlyEvenDays": false,
        "timeOnlyOddWeeks": false,
        "timeOnlyEvenWeeks": false,
        "timeMonths": "*",
        "timedatestart": "",
        "timedateend": "",
        "propertyStart": "",
        "propertyStartType": "none",
        "propertyStartCompare": "true",
        "propertyStartThreshold": "",
        "propertyStartThresholdType": "num",
        "startTimeAlt": "",
        "startTimeAltType": "entered",
        "startOffsetAlt": 0,
        "startOffsetAltType": "none",
        "startOffsetAltMultiplier": 60000,
        "propertyEnd": "",
        "propertyEndType": "none",
        "propertyEndCompare": "true",
        "propertyEndThreshold": "",
        "propertyEndThresholdType": "num",
        "endTimeAlt": "",
        "endTimeAltType": "entered",
        "endOffsetAlt": 0,
        "endOffsetAltType": "none",
        "endOffsetAltMultiplier": 60000,
        "withinTimeValue": "",
        "withinTimeValueType": "msgInput",
        "outOfTimeValue": "false",
        "outOfTimeValueType": "msgInput",
        "tsCompare": "0",
        "x": 2910,
        "y": 240,
        "wires": [
            [
                "7b7a693d416828d6"
            ],
            []
        ]
    },
    {
        "id": "5165f8c6.cc4798",
        "type": "server",
        "name": "Home Assistant",
        "addon": true,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "",
        "connectionDelay": false,
        "cacheJson": false,
        "heartbeat": false,
        "heartbeatInterval": "",
        "statusSeparator": "",
        "enableGlobalContextStore": true
    },
    {
        "id": "814a6af6675ecbdc",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "192.168.100.42",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "39a507ed6f81ba8d",
        "type": "ha-entity-config",
        "server": "5165f8c6.cc4798",
        "deviceConfig": "",
        "name": "Energy_control_on_off",
        "version": "6",
        "entityType": "switch",
        "haConfig": [
            {
                "property": "name",
                "value": "energy_control_on_off"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "switch"
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "5e71c4ffa9baa60b",
        "type": "position-config",
        "name": "",
        "isValide": "true",
        "angleType": "deg",
        "timeZoneOffset": 99,
        "timeZoneDST": 0,
        "stateTimeFormat": "3",
        "stateDateFormat": "12",
        "contextStore": ""
    }
]
